install.packages("leaflet")
source('~/.active-rstudio-document', echo=TRUE)
source('~/.active-rstudio-document', echo=TRUE)
# From http://leafletjs.com/examples/choropleth/us-states.js
library(leaflet)
nycounties <- geojsonio::geojson_read("http://localboundries.oknp.org/js/province.geojson",
what = "sp")
# Or use the rgdal equivalent:
# nycounties <- rgdal::readOGR("json/nycounties.geojson", "OGRGeoJSON")
pal <- colorNumeric("viridis", NULL)
leaflet(nycounties) %>%
addTiles()
library(leaflet)
topoData <- readLines("http://localboundries.oknp.org/js/province.geojson") %>% paste(collapse = "\n")
leaflet() %>% setView(lng = -98.583, lat = 39.833, zoom = 3) %>%
addTiles() %>%
addTopoJSON(topoData, weight = 1, color = "#444444", fill = FALSE)
topoData <- readLines("http://localboundries.oknp.org/js/province.geojson") %>% paste(collapse = "\n")
leaflet() %>% setView(lng = 28.3949, lat = 84.1240, zoom = 3) %>%
addTiles() %>%
addTopoJSON(topoData, weight = 1, color = "#444444", fill = FALSE)
leaflet() %>% setView(lng = 84.1240, lat = 28.3949, zoom = 3) %>%
addTiles() %>%
addTopoJSON(topoData, weight = 1, color = "#444444", fill = FALSE)
topoData <- readLines("data/gz_2010_us_outline_500k.json") %>% paste(collapse = "\n")
leaflet() %>% setView(lng = 84.1240, lat = 28.3949, zoom = 3) %>%
addTiles() %>%
addTopoJSON(topoData, weight = 1, color = "#444444", fill = FALSE)
topoData <- readLines("data/gz_2010_us_outline_500k.json") %>% paste(collapse = "\n")
leaflet() %>% setView(lng = -98.583, lat = 39.833, zoom = 3) %>%
addTiles() %>%
addTopoJSON(topoData, weight = 1, color = "#444444", fill = FALSE)
topoData <- readLines("data/gz_2010_us_outline_500k.json")
leaflet() %>% setView(lng = -98.583, lat = 39.833, zoom = 3) %>%
addTiles() %>%
addTopoJSON(topoData, weight = 1, color = "#444444", fill = FALSE)
library(leaflet)
topoData <- readLines("gz_2010_us_outline_500k.json") %>% paste(collapse = "\n")
leaflet() %>% setView(lng = -98.583, lat = 39.833, zoom = 3) %>%
addTiles() %>%
addTopoJSON(topoData, weight = 1, color = "#444444", fill = FALSE)
topoData
# From http://leafletjs.com/examples/choropleth/us-states.js
library(leaflet)
topoData <- readLines("gz_2010_us_050_00_500k.json") %>% paste(collapse = "\n")
leaflet() %>% setView(lng = -98.583, lat = 39.833, zoom = 3) %>%
addTiles() %>%
addTopoJSON(topoData, weight = 1, color = "#444444", fill = FALSE)
library("sp")
file <- system.file("examples", "california.geojson", package = "geojsonio")
out <- geojson_read(file, what = "sp")
plot(out)
source('~/.active-rstudio-document', echo=TRUE)
library(geojsonio)
library("sp")
file <- system.file("examples", "california.geojson", package = "geojsonio")
out <- geojson_read(file, what = "sp")
plot(out)
library(geojsonio)
library("sp")
url <- "https://raw.githubusercontent.com/shawnbot/d3-cartogram/master/data/us-states.topojson"
out <- topojson_read(url, verbose = FALSE)
plot(out)
library(geojsonio)
library("sp")
url <- "http://localboundries.oknp.org/css/province.topojson"
out <- topojson_read(url, verbose = FALSE)
plot(out)
View(out)
library(geojsonio)
library("sp")
url <- "http://localboundries.oknp.org/css/province.topojson"
out <- topojson_read(url, verbose = FALSE)
#plot(out)
library(highcharter)
highchart(type = "map") %>%
hc_add_series_map(map = map, df = out)
install.packages("highcharter")
library(geojsonio)
library("sp")
url <- "http://localboundries.oknp.org/css/province.topojson"
out <- topojson_read(url, verbose = FALSE)
#plot(out)
library(highcharter)
highchart(type = "map") %>%
hc_add_series_map(map = map, df = out)
class(out)
leaflet(states)
leaflet(states) %>%
setView(-96, 37.8, 4)
leaflet(states) %>%
setView(-96, 37.8, 4)
leaflet()
leaflet() %>%
addTiles()
leaflet(states) %>%
addTiles()
m <- leaflet(states) %>%
setView(-96, 37.8, 4) %>%
addProviderTiles("MapBox", options = providerTileOptions(
id = "mapbox.light",
accessToken = Sys.getenv('MAPBOX_ACCESS_TOKEN')))
m
m %>% addPolygons()
library(geojsonio)
library("sp")
url <- "https://leafletjs.com/examples/choropleth/us-states.js"
out <- topojson_read(url, verbose = FALSE)
states <- geojsonio:: geojson_read("https://leafletjs.com/examples/choropleth/us-states.js", what = "sp")
m <- leaflet(out) %>%
setView(84.12, 28.39, 4) %>%
addProviderTiles("MapBox", options = providerTileOptions(
id = "mapbox.light",
accessToken = Sys.getenv('MAPBOX_ACCESS_TOKEN')))
m
m %>% addPolygons()
bins <- c(0, 10, 20, 50, 100, 200, 500, 1000, Inf)
pal <- colorBin("YlOrRd", domain = states$density, bins = bins)
m %>% addPolygons(
fillColor = ~pal(density),
weight = 2,
opacity = 1,
color = "white",
dashArray = "3",
fillOpacity = 0.7)
m %>% addPolygons(
fillColor = ~pal(density),
weight = 2,
opacity = 1,
color = "white",
dashArray = "3",
fillOpacity = 0.7,
highlight = highlightOptions(
weight = 5,
color = "#666",
dashArray = "",
fillOpacity = 0.7,
bringToFront = TRUE))
addTiles(m) %>%
addTopoJSON(out, weight = 1, color = "#444444", fill = FALSE)
m %>% addTiles() %>%
addTopoJSON(out, weight = 1, color = "#444444", fill = FALSE)
leaflet() %>% addGeoJSON(out)
m %>% addTiles() %>%
addTopoJSON(out, weight = 1, color = "#444444", fill = FALSE)
m %>% addTiles() %>%
addTopoJSON(out, weight = 1, color = "#444444", fill = TRUE)
library(geojsonio)
library("sp")
url <- "https://leafletjs.com/examples/choropleth/us-states.js"
out <- topojson_read(url, verbose = FALSE)
#plot(out)
m <- leaflet() %>%
setView(84.12, 28.39, 4) %>% addTiles() %>%
addTopoJSON(out, weight = 1, color = "#444444", fill = TRUE)
m
hcmap(out, showInLegend = FALSE) %>%
hc_mapNavigation(enabled = TRUE)
hcmap(out, showInLegend = FALSE, geojson = TRUE) %>%
hc_mapNavigation(enabled = TRUE)
getContent <- function(url) {
library(httr)
content(GET(url))
}
world <- getContent("http://localboundries.oknp.org/js/province.geojson")
# is text
world <- jsonlite::fromJSON(world, simplifyVector = FALSE)
world <- getContent("https://raw.githubusercontent.com/johan/world.geo.json/master/countries.geo.json")
# is text
world <- jsonlite::fromJSON(world, simplifyVector = FALSE)
world <- getContent("http://localboundries.oknp.org/js/province.geojson")
world <- jsonlite::fromJSON(world, simplifyVector = FALSE)
world <- getContent("http://localboundries.oknp.org/js/province.geojson")
world <- geojson_json(world)
# is text
world <- jsonlite::fromJSON(world, simplifyVector = FALSE)
world <- getContent("https://raw.githubusercontent.com/johan/world.geo.json/master/countries.geo.json")
topoData <- readLines("https://raw.githubusercontent.com/johan/world.geo.json/master/countries.geo.json") %>% paste(collapse = "\n")
leaflet() %>% setView(lng = -98.583, lat = 39.833, zoom = 3) %>%
addTiles() %>%
addTopoJSON(topoData, weight = 1, color = "#444444", fill = FALSE)
topoData <- readLines("https://raw.githubusercontent.com/johan/world.geo.json/master/countries.geo.json") %>% paste(collapse = "\n")
leaflet()  %>%
addTiles() %>%
addTopoJSON(topoData, weight = 1, color = "#444444", fill = FALSE)
topoData <- readLines("https://raw.githubusercontent.com/johan/world.geo.json/master/countries.geo.json") %>% paste(collapse = "\n")
topoData <- geojson_json(topoData)
leaflet()  %>%
addTiles() %>%
addTopoJSON(topoData, weight = 1, color = "#444444", fill = FALSE)
topoData <- readLines("http://localboundries.oknp.org/js/province.geojson") %>% paste(collapse = "\n")
topoData <- geojson_json(topoData)
leaflet()  %>%
addTiles() %>%
addTopoJSON(topoData, weight = 1, color = "#444444", fill = FALSE)
cities <- data_frame(
name = c("London", "Birmingham", "Glasgow", "Liverpool"),
lat = c(51.507222, 52.483056,  55.858, 53.4),
lon = c(-0.1275, -1.893611, -4.259, -3),
z = c(1, 2, 3, 2)
)
glimpse(cities)
## Observations: 4
## Variables: 4
## $ name <chr> "London", "Birmingham", "Glasgow", "Liverpool"
## $ lat  <dbl> 51.50722, 52.48306, 55.85800, 53.40000
## $ lon  <dbl> -0.127500, -1.893611, -4.259000, -3.000000
## $ z    <dbl> 1, 2, 3, 2
hcmap("countries/gb/gb-all", showInLegend = FALSE) %>%
hc_add_series(data = cities, type = "mapbubble", name = "Cities", maxSize = '10%') %>%
hc_mapNavigation(enabled = TRUE)
library(tidyverse)
cities <- data_frame(
name = c("London", "Birmingham", "Glasgow", "Liverpool"),
lat = c(51.507222, 52.483056,  55.858, 53.4),
lon = c(-0.1275, -1.893611, -4.259, -3),
z = c(1, 2, 3, 2)
)
glimpse(cities)
## Observations: 4
## Variables: 4
## $ name <chr> "London", "Birmingham", "Glasgow", "Liverpool"
## $ lat  <dbl> 51.50722, 52.48306, 55.85800, 53.40000
## $ lon  <dbl> -0.127500, -1.893611, -4.259000, -3.000000
## $ z    <dbl> 1, 2, 3, 2
hcmap("countries/gb/gb-all", showInLegend = FALSE) %>%
hc_add_series(data = cities, type = "mapbubble", name = "Cities", maxSize = '10%') %>%
hc_mapNavigation(enabled = TRUE)
library(highcharter)
library(dplyr)
library(purrr)
set.seed(1234)
n <- 20
z <-  sample(1:n)
sequences <- map2(1:n, z, function(x, y){ ifelse(x == 1:n, y, 0) })
df <- data_frame(
lat = runif(n, -180, 180),
lon = runif(n, -180, 180),
z = z,
color = colorize(z),
sequence = sequences
)
hcmap() %>%
hc_add_series(data = df, type = "mapbubble",
minSize = 0, maxSize = 30) %>%
hc_motion(enabled = TRUE, series = 1, labels = 1:n,
loop = TRUE, autoPlay = TRUE,
updateInterval = 1000, magnet = list(step =  1)) %>%
hc_plotOptions(series = list(showInLegend = FALSE))
hcmap() %>%
hc_add_series(data = df, type = "mapbubble",
minSize = 0, maxSize = 30) %>%
hc_motion(enabled = TRUE, series = 1, labels = 1:n,
loop = TRUE, autoPlay = TRUE,
updateInterval = 1000, magnet = list(step =  1)) %>%
%>%
hc_mapNavigation(enabled = TRUE) %>%
hc_plotOptions(series = list(showInLegend = FALSE))
hcmap() %>%
hc_add_series(data = df, type = "mapbubble",
minSize = 0, maxSize = 30) %>%
hc_motion(enabled = TRUE, series = 1, labels = 1:n,
loop = TRUE, autoPlay = TRUE,
updateInterval = 1000, magnet = list(step =  1)) %>%
hc_plotOptions(series = list(showInLegend = FALSE))
library(geojsonio)
library("sp")
url <- "http://localboundries.oknp.org/js/province.geojson"
out <- geojson_read(url, verbose = FALSE)
#plot(out)
m <- leaflet(out) %>%
setView(84.12, 28.39, 4) %>%
addProviderTiles("MapBox", options = providerTileOptions(
id = "mapbox.light",
accessToken = Sys.getenv('MAPBOX_ACCESS_TOKEN')))
m %>% addPolygons()
hcmap("countries/us/us-all", data = data_fake, value = "value",
joinBy = c("hc-a2", "code"), name = "Fake data",
dataLabels = list(enabled = TRUE, format = '{point.name}'),
borderColor = "#FAFAFA", borderWidth = 0.1,
tooltip = list(valueDecimals = 2, valuePrefix = "$", valueSuffix = " USD"))
set.seed(1234)
data_fake <- mapdata %>%
select(code = `hc-a2`) %>%
mutate(value = 1e5 * abs(rt(nrow(.), df = 10)))
glimpse(data_fake)
mapdata <- get_data_from_map(download_map_data("countries/us/us-all"))
glimpse(mapdata
set.seed(1234)
data_fake <- mapdata %>%
select(code = `hc-a2`) %>%
mutate(value = 1e5 * abs(rt(nrow(.), df = 10)))
glimpse(data_fake)
hcmap("countries/us/us-all", data = data_fake, value = "value",
joinBy = c("hc-a2", "code"), name = "Fake data",
dataLabels = list(enabled = TRUE, format = '{point.name}'),
borderColor = "#FAFAFA", borderWidth = 0.1,
tooltip = list(valueDecimals = 2, valuePrefix = "$", valueSuffix = " USD"))
hcmap("countries/np/np-all", data = data_fake, value = "value",
joinBy = c("hc-a2", "code"), name = "Fake data",
dataLabels = list(enabled = TRUE, format = '{point.name}'),
borderColor = "#FAFAFA", borderWidth = 0.1,
tooltip = list(valueDecimals = 2, valuePrefix = "$", valueSuffix = " USD"))
mapdata <- get_data_from_map(download_map_data("countries/np/np-all"))
glimpse(mapdata
set.seed(1234)
data_fake <- mapdata %>%
select(code = `hc-a2`) %>%
mutate(value = 1e5 * abs(rt(nrow(.), df = 10)))
glimpse(data_fake)
hcmap("countries/np/np-all", data = data_fake, value = "value",
joinBy = c("hc-a2", "code"), name = "Fake data",
dataLabels = list(enabled = TRUE, format = '{point.name}'),
borderColor = "#FAFAFA", borderWidth = 0.1,
tooltip = list(valueDecimals = 2, valuePrefix = "$", valueSuffix = " USD")) %>%  hc_mapNavigation(enabled = TRUE)
hcmap("countries/np/np-all", data = data_fake, value = "value",
joinBy = c("hc-a2", "code"), name = "Fake data",
dataLabels = list(enabled = TRUE, format = '{point.name}'),
borderColor = "#000000", borderWidth = 0.1,
tooltip = list(valueDecimals = 2, valuePrefix = "$", valueSuffix = " USD")) %>%  hc_mapNavigation(enabled = TRUE)
hcmap("countries/np/np-all", data = data_fake, value = "value",
joinBy = c("hc-a2", "code"), name = "Fake data",
dataLabels = list(enabled = TRUE, format = '{point.name}'),
borderColor = "#000000", borderWidth = 0.5,
tooltip = list(valueDecimals = 2, valuePrefix = "$", valueSuffix = " USD")) %>%  hc_mapNavigation(enabled = TRUE)
hcmap("countries/np/np-all", data = data_fake, value = "value",
joinBy = c("hc-a2", "code"), name = "Fake data",
dataLabels = list(enabled = TRUE, format = '{point.name}'),
borderColor = "#000000", borderWidth = 0.2,
tooltip = list(valueDecimals = 2, valuePrefix = "$", valueSuffix = " USD")) %>%  hc_mapNavigation(enabled = TRUE)
hcmap("countries/np/np-all", data = data_fake, value = "value",
joinBy = c("hc-a2", "code"), name = "Fake data",
dataLabels = list(enabled = TRUE, format = '{point.name}'),
borderColor = "#000000", borderWidth = 0.2,
tooltip = list(valueDecimals = 2, valuePrefix = "$", valueSuffix = " USD")) %>%  hc_mapNavigation(enabled = TRUE)
mapdata <- get_data_from_map(download_map_data("countries/np/np-all"))
glimpse(mapdata
set.seed(1234)
data_fake <- mapdata %>%
select(code = `hc-a2`) %>%
mutate(value = 1e5 * abs(rt(nrow(.), df = 10)))
glimpse(data_fake)
hcmap("countries/np/np-all", data = data_fake, value = "value",
joinBy = c("hc-a2", "code"), name = "Fake data",
dataLabels = list(enabled = TRUE, format = '{point.name}'),
borderColor = "#000000", borderWidth = 0.2,
tooltip = list(valueDecimals = 2, valuePrefix = "$", valueSuffix = " USD")) %>%  hc_mapNavigation(enabled = TRUE)
mapdata <- get_data_from_map(download_map_data("countries/np/np-all"))
glimpse(mapdata
set.seed(134)
data_fake <- mapdata %>%
select(code = `hc-a2`) %>%
mutate(value = 1e5 * abs(rt(nrow(.), df = 10)))
glimpse(data_fake)
hcmap("countries/np/np-all", data = data_fake, value = "value",
joinBy = c("hc-a2", "code"), name = "Fake data",
dataLabels = list(enabled = TRUE, format = '{point.name}'),
borderColor = "#000000", borderWidth = 0.2,
tooltip = list(valueDecimals = 2, valuePrefix = "$", valueSuffix = " USD")) %>%  hc_mapNavigation(enabled = TRUE)
library(geojsonio)
library("sp")
url <- "http://localboundries.oknp.org/js/province.geojson"
out <- geojson_read(url, verbose = FALSE)
#plot(out)
m <- leaflet(out) %>%
setView(84.12, 28.39, 4) %>%
addProviderTiles("MapBox", options = providerTileOptions(
id = "mapbox.light",
accessToken = Sys.getenv('MAPBOX_ACCESS_TOKEN')))
m %>% addPolygons()
bins <- c(0, 10, 20, 50, 100, 200, 500, 1000, Inf)
pal <- colorBin("YlOrRd", domain = out$density, bins = bins)
m %>% addPolygons(
fillColor = ~pal(density),
weight = 2,
opacity = 1,
color = "white",
dashArray = "3",
fillOpacity = 0.7)
states$density
bins <- c(0, 10, 20, 50, 100, 200, 500, 1000, Inf)
pal <- colorBin("YlOrRd", domain = out$density, bins = bins)
~pal(density)
class(out)
out <- as.json(out)
install.packages("spdplyr","rgdal","rmapshaper")
install.packages("spdplyr","rgdal","rmapshaper")
install.packages("spdplyr","rgdal","rmapshaper")
install.packages("spdplyr","rmapshaper")
install.packages("spdplyr","rmapshaper")
install.packages("spdplyr","rgdal","rmapshaper")
install.packages("spdplyr","rgdal","rmapshaper")
library(rgdal)
names(out)
names(states)
m <- leaflet(out) %>%
setView(84.12, 28.39, 4) %>%
addProviderTiles("MapBox", options = providerTileOptions(
id = "mapbox.light",
accessToken = Sys.getenv('MAPBOX_ACCESS_TOKEN')))
m %>% addPolygons(popup=~NAME)
library(geojsonio)
library("sp")
url <- "http://localboundries.oknp.org/js/province.geojson"
out <- geojson_read(url, verbose = FALSE)
#plot(out)
m <- leaflet(out) %>%
setView(84.12, 28.39, 4) %>%
addProviderTiles("MapBox", options = providerTileOptions(
id = "mapbox.light",
accessToken = Sys.getenv('MAPBOX_ACCESS_TOKEN')))
m %>% addPolygons(popup=~NAME)
m <- leaflet(out) %>%
setView(84.12, 28.39, 4) %>%
addProviderTiles("MapBox", options = providerTileOptions(
id = "mapbox.light",
accessToken = Sys.getenv('MAPBOX_ACCESS_TOKEN')))
m %>% addPolygons(popup=~NAME)
names(out)
View(m)
out$type
m <- leaflet(out) %>%
setView(84.12, 28.39, 4) %>%
addProviderTiles("MapBox", options = providerTileOptions(
id = "mapbox.light",
accessToken = Sys.getenv('MAPBOX_ACCESS_TOKEN')))
m %>% addPolygons()
library(geojsonio)
library("sp")
library(dplyr)
url <- "http://localboundries.oknp.org/js/province.geojson"
out <- geojson_read(url, verbose = FALSE)
#plot(out)
m <- leaflet(out) %>%
setView(84.12, 28.39, 4) %>%
addProviderTiles("MapBox", options = providerTileOptions(
id = "mapbox.light",
accessToken = Sys.getenv('MAPBOX_ACCESS_TOKEN')))
m %>% addPolygons()
url <- "http://localboundries.oknp.org/js/province.geojson"
out <- geojson_read(url, verbose = FALSE)
out <- topojson_read("E:/Projekt/nepal_provincial_map/data/map/gis-data/province.topojson", verbose = FALSE)
m <- leaflet(out) %>%
setView(84.12, 28.39, 4) %>%
addProviderTiles("MapBox", options = providerTileOptions(
id = "mapbox.light",
accessToken = Sys.getenv('MAPBOX_ACCESS_TOKEN')))
m %>% addPolygons()
library(leaflet)
url <- "http://localboundries.oknp.org/js/province.geojson"
out <- topojson_read("E:/Projekt/nepal_provincial_map/data/map/gis-data/province.topojson", verbose = FALSE)
#plot(out)
m <- leaflet(out) %>%
setView(84.12, 28.39, 4) %>%
addProviderTiles("MapBox", options = providerTileOptions(
id = "mapbox.light",
accessToken = Sys.getenv('MAPBOX_ACCESS_TOKEN')))
m %>% addPolygons()
names(out)
m %>% addPolygons(popup = ~Title)
